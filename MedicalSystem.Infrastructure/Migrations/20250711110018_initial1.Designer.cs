// <auto-generated />
using System;
using MedicalSystem.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MedicalSystem.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250711110018_initial1")]
    partial class initial1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MedicalSystem.Domain.Entities.Appointment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AppointmentDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Symptoms")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("MedicalSystem.Domain.Entities.AssignedTest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AppointmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TestTemplateId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("TestTemplateId");

                    b.ToTable("AssignedTests");
                });

            modelBuilder.Entity("MedicalSystem.Domain.Entities.Bed", b =>
                {
                    b.Property<int>("BedID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BedID"));

                    b.Property<string>("BedNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsOccupied")
                        .HasColumnType("bit");

                    b.Property<int>("WardID")
                        .HasColumnType("int");

                    b.HasKey("BedID");

                    b.HasIndex("WardID");

                    b.ToTable("Beds");
                });

            modelBuilder.Entity("MedicalSystem.Domain.Entities.Department", b =>
                {
                    b.Property<int>("DepartmentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DepartmentID"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("HeadDoctorID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DepartmentID");

                    b.HasIndex("HeadDoctorID");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("MedicalSystem.Domain.Entities.HospitalVisit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AdmissionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("BedNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DischargeDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("HospitalVisits");
                });

            modelBuilder.Entity("MedicalSystem.Domain.Entities.Hospitalization", b =>
                {
                    b.Property<int>("HospitalizationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HospitalizationID"));

                    b.Property<DateTime>("AdmissionDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("AttendingDoctorID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("BedID")
                        .HasColumnType("int");

                    b.Property<string>("DiagnosisOnAdmission")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DiagnosisOnDischarge")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DischargeDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PatientID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("HospitalizationID");

                    b.HasIndex("AttendingDoctorID");

                    b.HasIndex("BedID");

                    b.HasIndex("PatientID");

                    b.ToTable("Hospitalizations");
                });

            modelBuilder.Entity("MedicalSystem.Domain.Entities.Invoice", b =>
                {
                    b.Property<Guid>("InvoiceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CreatedByID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("InvoiceDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("PaidAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("PatientID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("InvoiceID");

                    b.HasIndex("CreatedByID");

                    b.HasIndex("PatientID");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("MedicalSystem.Domain.Entities.InvoiceDetail", b =>
                {
                    b.Property<int>("InvoiceDetailID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InvoiceDetailID"));

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("InvoiceID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<Guid>("ServiceID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("InvoiceDetailID");

                    b.HasIndex("InvoiceID");

                    b.HasIndex("ServiceID");

                    b.ToTable("InvoiceDetails");
                });

            modelBuilder.Entity("MedicalSystem.Domain.Entities.LabOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("OrderedByID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PatientID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OrderedByID");

                    b.HasIndex("PatientID");

                    b.ToTable("LabOrders");
                });

            modelBuilder.Entity("MedicalSystem.Domain.Entities.LabOrderDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<Guid>("PerformedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ReferenceRange")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Result")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ResultDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TestTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("PerformedById");

                    b.HasIndex("TestTypeId");

                    b.ToTable("LabOrderDetails");
                });

            modelBuilder.Entity("MedicalSystem.Domain.Entities.LabTestType", b =>
                {
                    b.Property<int>("TestTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TestTypeID"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalRange")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PreparationInstructions")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SampleType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TestName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TestTypeID");

                    b.ToTable("LabTestTypes");
                });

            modelBuilder.Entity("MedicalSystem.Domain.Entities.MedicalHistory", b =>
                {
                    b.Property<int>("HistoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HistoryID"));

                    b.Property<Guid?>("AppointmentID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HistoryType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PatientID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("RecordDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("RecordedByID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("HistoryID");

                    b.HasIndex("AppointmentID");

                    b.HasIndex("PatientID");

                    b.HasIndex("RecordedByID");

                    b.ToTable("MedicalHistories");
                });

            modelBuilder.Entity("MedicalSystem.Domain.Entities.MedicalRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Anamnesis")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Diagnosis")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Prescriptions")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("MedicalRecords");
                });

            modelBuilder.Entity("MedicalSystem.Domain.Entities.NurseRound", b =>
                {
                    b.Property<int>("RoundID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoundID"));

                    b.Property<string>("BloodPressure")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("HospitalizationID")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("NurseID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PatientID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Pulse")
                        .HasColumnType("int");

                    b.Property<int?>("RespirationRate")
                        .HasColumnType("int");

                    b.Property<DateTime>("RoundDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("Temperature")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("RoundID");

                    b.HasIndex("HospitalizationID");

                    b.HasIndex("NurseID");

                    b.HasIndex("PatientID");

                    b.ToTable("NurseRounds");
                });

            modelBuilder.Entity("MedicalSystem.Domain.Entities.Patient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("MedicalSystem.Domain.Entities.PatientDiet", b =>
                {
                    b.Property<int>("DietID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DietID"));

                    b.Property<string>("DietType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("HospitalizationID")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PatientID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("DietID");

                    b.HasIndex("HospitalizationID");

                    b.HasIndex("PatientID");

                    b.ToTable("PatientDiets");
                });

            modelBuilder.Entity("MedicalSystem.Domain.Entities.PatientQueue", b =>
                {
                    b.Property<int>("QueueID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QueueID"));

                    b.Property<Guid?>("AppointmentID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("DepartmentID")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PatientID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<DateTime>("QueueDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("QueueID");

                    b.HasIndex("AppointmentID");

                    b.HasIndex("DepartmentID");

                    b.HasIndex("PatientID");

                    b.ToTable("PatientQueues");
                });

            modelBuilder.Entity("MedicalSystem.Domain.Entities.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("InvoiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReceiptNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ReceivedByID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("PatientId");

                    b.HasIndex("ReceivedByID");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("MedicalSystem.Domain.Entities.Prescription", b =>
                {
                    b.Property<int>("PrescriptionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PrescriptionID"));

                    b.Property<string>("Dosage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Duration")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Frequency")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Instructions")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Medication")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PatientID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PrescribedByID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("PrescriptionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PrescriptionID");

                    b.HasIndex("PatientID");

                    b.HasIndex("PrescribedByID");

                    b.ToTable("Prescriptions");
                });

            modelBuilder.Entity("MedicalSystem.Domain.Entities.QueueItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Department")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("QueueItems");
                });

            modelBuilder.Entity("MedicalSystem.Domain.Entities.Refund", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PaymentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PaymentId");

                    b.ToTable("Refunds");
                });

            modelBuilder.Entity("MedicalSystem.Domain.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("MedicalSystem.Domain.Entities.Service", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("MedicalSystem.Domain.Entities.StaffProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Department")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("StaffProfiles");
                });

            modelBuilder.Entity("MedicalSystem.Domain.Entities.TestResult", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AssignedTestId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ParameterName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReferenceRange")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AssignedTestId");

                    b.ToTable("TestResults");
                });

            modelBuilder.Entity("MedicalSystem.Domain.Entities.TestTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TestTemplates");
                });

            modelBuilder.Entity("MedicalSystem.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("MedicalSystem.Domain.Entities.UserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("MedicalSystem.Domain.Entities.Ward", b =>
                {
                    b.Property<int>("WardID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WardID"));

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<int>("DepartmentID")
                        .HasColumnType("int");

                    b.Property<string>("GenderSpecific")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("WardNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("WardID");

                    b.HasIndex("DepartmentID");

                    b.ToTable("Wards");
                });

            modelBuilder.Entity("MedicalSystem.Domain.Entities.Appointment", b =>
                {
                    b.HasOne("MedicalSystem.Domain.Entities.User", "Doctor")
                        .WithMany("Appointments")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MedicalSystem.Domain.Entities.Patient", "Patient")
                        .WithMany("Appointments")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("MedicalSystem.Domain.Entities.AssignedTest", b =>
                {
                    b.HasOne("MedicalSystem.Domain.Entities.Appointment", "Appointment")
                        .WithMany("AssignedTests")
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MedicalSystem.Domain.Entities.TestTemplate", "TestTemplate")
                        .WithMany("AssignedTests")
                        .HasForeignKey("TestTemplateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Appointment");

                    b.Navigation("TestTemplate");
                });

            modelBuilder.Entity("MedicalSystem.Domain.Entities.Bed", b =>
                {
                    b.HasOne("MedicalSystem.Domain.Entities.Ward", "Ward")
                        .WithMany("Beds")
                        .HasForeignKey("WardID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Ward");
                });

            modelBuilder.Entity("MedicalSystem.Domain.Entities.Department", b =>
                {
                    b.HasOne("MedicalSystem.Domain.Entities.User", "HeadDoctor")
                        .WithMany("Departments")
                        .HasForeignKey("HeadDoctorID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("HeadDoctor");
                });

            modelBuilder.Entity("MedicalSystem.Domain.Entities.HospitalVisit", b =>
                {
                    b.HasOne("MedicalSystem.Domain.Entities.Patient", "Patient")
                        .WithMany("HospitalVisits")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("MedicalSystem.Domain.Entities.Hospitalization", b =>
                {
                    b.HasOne("MedicalSystem.Domain.Entities.User", "AttendingDoctor")
                        .WithMany("Hospitalizations")
                        .HasForeignKey("AttendingDoctorID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MedicalSystem.Domain.Entities.Bed", "Bed")
                        .WithMany("Hospitalizations")
                        .HasForeignKey("BedID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MedicalSystem.Domain.Entities.Patient", "Patient")
                        .WithMany("Hospitalizations")
                        .HasForeignKey("PatientID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AttendingDoctor");

                    b.Navigation("Bed");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("MedicalSystem.Domain.Entities.Invoice", b =>
                {
                    b.HasOne("MedicalSystem.Domain.Entities.User", "CreatedBy")
                        .WithMany("Invoices")
                        .HasForeignKey("CreatedByID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MedicalSystem.Domain.Entities.Patient", "Patient")
                        .WithMany("Invoices")
                        .HasForeignKey("PatientID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("MedicalSystem.Domain.Entities.InvoiceDetail", b =>
                {
                    b.HasOne("MedicalSystem.Domain.Entities.Invoice", "Invoice")
                        .WithMany("InvoiceDetails")
                        .HasForeignKey("InvoiceID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MedicalSystem.Domain.Entities.Service", "Service")
                        .WithMany("InvoiceDetails")
                        .HasForeignKey("ServiceID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Invoice");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("MedicalSystem.Domain.Entities.LabOrder", b =>
                {
                    b.HasOne("MedicalSystem.Domain.Entities.User", "OrderedBy")
                        .WithMany("LabOrders")
                        .HasForeignKey("OrderedByID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MedicalSystem.Domain.Entities.Patient", "Patient")
                        .WithMany("LabOrders")
                        .HasForeignKey("PatientID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("OrderedBy");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("MedicalSystem.Domain.Entities.LabOrderDetail", b =>
                {
                    b.HasOne("MedicalSystem.Domain.Entities.LabOrder", "LabOrder")
                        .WithMany("LabOrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MedicalSystem.Domain.Entities.User", "PerformedBy")
                        .WithMany("LabOrderDetails")
                        .HasForeignKey("PerformedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MedicalSystem.Domain.Entities.LabTestType", "TestType")
                        .WithMany("LabOrderDetails")
                        .HasForeignKey("TestTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("LabOrder");

                    b.Navigation("PerformedBy");

                    b.Navigation("TestType");
                });

            modelBuilder.Entity("MedicalSystem.Domain.Entities.MedicalHistory", b =>
                {
                    b.HasOne("MedicalSystem.Domain.Entities.Appointment", "Appointment")
                        .WithMany("MedicalHistories")
                        .HasForeignKey("AppointmentID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MedicalSystem.Domain.Entities.Patient", "Patient")
                        .WithMany("MedicalHistories")
                        .HasForeignKey("PatientID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MedicalSystem.Domain.Entities.User", "RecordedBy")
                        .WithMany("MedicalHistories")
                        .HasForeignKey("RecordedByID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Appointment");

                    b.Navigation("Patient");

                    b.Navigation("RecordedBy");
                });

            modelBuilder.Entity("MedicalSystem.Domain.Entities.MedicalRecord", b =>
                {
                    b.HasOne("MedicalSystem.Domain.Entities.User", "Doctor")
                        .WithMany("MedicalRecords")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MedicalSystem.Domain.Entities.Patient", "Patient")
                        .WithMany("MedicalRecords")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("MedicalSystem.Domain.Entities.NurseRound", b =>
                {
                    b.HasOne("MedicalSystem.Domain.Entities.Hospitalization", null)
                        .WithMany("NurseRounds")
                        .HasForeignKey("HospitalizationID");

                    b.HasOne("MedicalSystem.Domain.Entities.User", "Nurse")
                        .WithMany("NurseRounds")
                        .HasForeignKey("NurseID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MedicalSystem.Domain.Entities.Patient", "Patient")
                        .WithMany("NurseRounds")
                        .HasForeignKey("PatientID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Nurse");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("MedicalSystem.Domain.Entities.Patient", b =>
                {
                    b.HasOne("MedicalSystem.Domain.Entities.User", "User")
                        .WithOne("Patient")
                        .HasForeignKey("MedicalSystem.Domain.Entities.Patient", "UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("User");
                });

            modelBuilder.Entity("MedicalSystem.Domain.Entities.PatientDiet", b =>
                {
                    b.HasOne("MedicalSystem.Domain.Entities.Hospitalization", "Hospitalization")
                        .WithMany("PatientDiets")
                        .HasForeignKey("HospitalizationID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MedicalSystem.Domain.Entities.Patient", "Patient")
                        .WithMany("PatientDiets")
                        .HasForeignKey("PatientID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Hospitalization");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("MedicalSystem.Domain.Entities.PatientQueue", b =>
                {
                    b.HasOne("MedicalSystem.Domain.Entities.Appointment", "Appointment")
                        .WithMany("PatientQueues")
                        .HasForeignKey("AppointmentID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MedicalSystem.Domain.Entities.Department", "Department")
                        .WithMany("PatientQueues")
                        .HasForeignKey("DepartmentID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("MedicalSystem.Domain.Entities.Patient", "Patient")
                        .WithMany("PatientQueues")
                        .HasForeignKey("PatientID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Appointment");

                    b.Navigation("Department");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("MedicalSystem.Domain.Entities.Payment", b =>
                {
                    b.HasOne("MedicalSystem.Domain.Entities.Invoice", "Invoice")
                        .WithMany("Payments")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MedicalSystem.Domain.Entities.Patient", "Patient")
                        .WithMany("Payments")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MedicalSystem.Domain.Entities.User", "ReceivedBy")
                        .WithMany("Payments")
                        .HasForeignKey("ReceivedByID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Invoice");

                    b.Navigation("Patient");

                    b.Navigation("ReceivedBy");
                });

            modelBuilder.Entity("MedicalSystem.Domain.Entities.Prescription", b =>
                {
                    b.HasOne("MedicalSystem.Domain.Entities.Patient", "Patient")
                        .WithMany("Prescriptions")
                        .HasForeignKey("PatientID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MedicalSystem.Domain.Entities.User", "PrescribedBy")
                        .WithMany("Prescriptions")
                        .HasForeignKey("PrescribedByID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Patient");

                    b.Navigation("PrescribedBy");
                });

            modelBuilder.Entity("MedicalSystem.Domain.Entities.QueueItem", b =>
                {
                    b.HasOne("MedicalSystem.Domain.Entities.Patient", "Patient")
                        .WithMany("QueueItems")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("MedicalSystem.Domain.Entities.Refund", b =>
                {
                    b.HasOne("MedicalSystem.Domain.Entities.Payment", "Payment")
                        .WithMany("Refunds")
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("MedicalSystem.Domain.Entities.StaffProfile", b =>
                {
                    b.HasOne("MedicalSystem.Domain.Entities.User", "User")
                        .WithOne("StaffProfile")
                        .HasForeignKey("MedicalSystem.Domain.Entities.StaffProfile", "UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("User");
                });

            modelBuilder.Entity("MedicalSystem.Domain.Entities.TestResult", b =>
                {
                    b.HasOne("MedicalSystem.Domain.Entities.AssignedTest", "AssignedTest")
                        .WithMany("Results")
                        .HasForeignKey("AssignedTestId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AssignedTest");
                });

            modelBuilder.Entity("MedicalSystem.Domain.Entities.UserRole", b =>
                {
                    b.HasOne("MedicalSystem.Domain.Entities.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedicalSystem.Domain.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MedicalSystem.Domain.Entities.Ward", b =>
                {
                    b.HasOne("MedicalSystem.Domain.Entities.Department", "Department")
                        .WithMany("Wards")
                        .HasForeignKey("DepartmentID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("MedicalSystem.Domain.Entities.Appointment", b =>
                {
                    b.Navigation("AssignedTests");

                    b.Navigation("MedicalHistories");

                    b.Navigation("PatientQueues");
                });

            modelBuilder.Entity("MedicalSystem.Domain.Entities.AssignedTest", b =>
                {
                    b.Navigation("Results");
                });

            modelBuilder.Entity("MedicalSystem.Domain.Entities.Bed", b =>
                {
                    b.Navigation("Hospitalizations");
                });

            modelBuilder.Entity("MedicalSystem.Domain.Entities.Department", b =>
                {
                    b.Navigation("PatientQueues");

                    b.Navigation("Wards");
                });

            modelBuilder.Entity("MedicalSystem.Domain.Entities.Hospitalization", b =>
                {
                    b.Navigation("NurseRounds");

                    b.Navigation("PatientDiets");
                });

            modelBuilder.Entity("MedicalSystem.Domain.Entities.Invoice", b =>
                {
                    b.Navigation("InvoiceDetails");

                    b.Navigation("Payments");
                });

            modelBuilder.Entity("MedicalSystem.Domain.Entities.LabOrder", b =>
                {
                    b.Navigation("LabOrderDetails");
                });

            modelBuilder.Entity("MedicalSystem.Domain.Entities.LabTestType", b =>
                {
                    b.Navigation("LabOrderDetails");
                });

            modelBuilder.Entity("MedicalSystem.Domain.Entities.Patient", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("HospitalVisits");

                    b.Navigation("Hospitalizations");

                    b.Navigation("Invoices");

                    b.Navigation("LabOrders");

                    b.Navigation("MedicalHistories");

                    b.Navigation("MedicalRecords");

                    b.Navigation("NurseRounds");

                    b.Navigation("PatientDiets");

                    b.Navigation("PatientQueues");

                    b.Navigation("Payments");

                    b.Navigation("Prescriptions");

                    b.Navigation("QueueItems");
                });

            modelBuilder.Entity("MedicalSystem.Domain.Entities.Payment", b =>
                {
                    b.Navigation("Refunds");
                });

            modelBuilder.Entity("MedicalSystem.Domain.Entities.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("MedicalSystem.Domain.Entities.Service", b =>
                {
                    b.Navigation("InvoiceDetails");
                });

            modelBuilder.Entity("MedicalSystem.Domain.Entities.TestTemplate", b =>
                {
                    b.Navigation("AssignedTests");
                });

            modelBuilder.Entity("MedicalSystem.Domain.Entities.User", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Departments");

                    b.Navigation("Hospitalizations");

                    b.Navigation("Invoices");

                    b.Navigation("LabOrderDetails");

                    b.Navigation("LabOrders");

                    b.Navigation("MedicalHistories");

                    b.Navigation("MedicalRecords");

                    b.Navigation("NurseRounds");

                    b.Navigation("Patient")
                        .IsRequired();

                    b.Navigation("Payments");

                    b.Navigation("Prescriptions");

                    b.Navigation("StaffProfile");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("MedicalSystem.Domain.Entities.Ward", b =>
                {
                    b.Navigation("Beds");
                });
#pragma warning restore 612, 618
        }
    }
}
