@page "/login"
@using MedicalSystem.Staff.Auth
@using MedicalSystem.Staff.Services
@inject HttpClient Http
@inject SecureStorageService SecureStorageService
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager Navigation

<h3>Login</h3>

<EditForm Model="@loginModel" OnValidSubmit="HandleLogin">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label>Username</label>
        <InputText class="form-control" @bind-Value="loginModel.Username" />
    </div>

    <div class="mb-3">
        <label>Password</label>
        <InputText class="form-control" @bind-Value="loginModel.Password" type="password" />
    </div>

    <button class="btn btn-primary" type="submit">Login</button>

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger mt-3">@errorMessage</div>
    }
</EditForm>

@code {
    private LoginModel loginModel = new();
    private string? errorMessage;

    private async Task HandleLogin()
    {
        try
        {
            var response = await Http.PostAsJsonAsync("api/auth/login", loginModel);

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<TokenResponse>();
                if (result is not null)
                {
                    SecureStorageService.SetToken(result.Token);

                    // Cast to your custom provider and notify authentication
                    if (AuthStateProvider is JwtAuthenticationStateProvider jwtProvider)
                    {
                        jwtProvider.NotifyUserAuthentication(result.Token);
                    }

                    Navigation.NavigateTo("/");
                }
                else
                {
                    errorMessage = "Login failed: empty response";
                }
            }
            else
            {
                errorMessage = "Invalid username or password.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = "Login error: " + ex.Message;
        }
    }

    public class LoginModel
    {
        public string Username { get; set; } = string.Empty;
        public string Password { get; set; } = string.Empty;
    }

    public class TokenResponse
    {
        public string Token { get; set; } = string.Empty;
    }
}
